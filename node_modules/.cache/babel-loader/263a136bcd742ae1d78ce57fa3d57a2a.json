{"ast":null,"code":"var _jsxFileName = \"/Users/jayrl707/Documents/BCS/ClickyGame/src/App.js\";\nimport React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Header from \"./components/Header/Header\";\nimport Picture from \"./pictures.json\";\nimport Cards from \"./components/Cards/Cards\"; // Function that will shuffle the array\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const x = Math.floor(Math.random() * (i + 1));\n    var _ref = [array[x], array[i]];\n    array[i] = _ref[0];\n    array[x] = _ref[1];\n  }\n\n  return array;\n}\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Picture,\n      score: 0,\n      highscore: 0,\n      clickPicturesArray: []\n    };\n\n    this.clickPicture = id => {\n      let clickPicturesArray = this.state.clickPicturesArray;\n      let score = this.state.score;\n      let highscore = this.state.highscore; // High\n\n      if (score > highscore) {\n        this.setState({\n          highscore: score\n        });\n      } // push the picture id to array\n\n\n      if (clickPicturesArray.indexOf(id) === -1) {\n        clickPicturesArray.push(id);\n        console.log(clickPicturesArray);\n        this.addToScore();\n        this.shufflePictures(); // if player wins, then alert pops up. \n      } else if (this.state.score >= 11) {\n        alert(\"Congratulations!\");\n        this.setState({\n          score: 0,\n          clickPicturesArray: []\n        }); // if player loses, then alert pops up\n      } else {\n        alert(\"You Lost! You scored: \" + score);\n        this.setState({\n          score: 0,\n          clickPicturesArray: []\n        });\n      }\n    };\n\n    this.addToScore = () => {\n      this.setState({\n        score: this.state.score + 1\n      });\n    };\n\n    this.shufflePictures = () => {\n      this.setState({\n        Picture: shuffle(Picture)\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      score: this.state.score,\n      highscore: this.state.highscore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.Picture.map(pictures => React.createElement(Cards, {\n      key: pictures.id,\n      id: pictures.id,\n      name: pictures.name,\n      image: pictures.image,\n      class: \"imgClass\",\n      clickPicture: this.clickPicture,\n      width: 100,\n      heigt: 100,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jayrl707/Documents/BCS/ClickyGame/src/App.js"],"names":["React","Component","Wrapper","Header","Picture","Cards","shuffle","array","i","length","x","Math","floor","random","App","state","score","highscore","clickPicturesArray","clickPicture","id","setState","indexOf","push","console","log","addToScore","shufflePictures","alert","render","map","pictures","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Header from \"./components/Header/Header\";\nimport Picture from \"./pictures.json\";\nimport Cards from \"./components/Cards/Cards\";\n\n// Function that will shuffle the array\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const x = Math.floor(Math.random() * (i + 1));\n    [array[i], array[x]] = [array[x], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    Picture,\n    score: 0,\n    highscore: 0,\n    clickPicturesArray: []\n  };\n\n\n  // Function wwhen the picture gets clicked\n  clickPicture = id => {\n    let clickPicturesArray = this.state.clickPicturesArray;\n    let score = this.state.score;\n    let highscore = this.state.highscore;\n\n    // High\n    if (score > highscore) {\n      this.setState({ highscore: score });\n    }\n\n    // push the picture id to array\n    if (clickPicturesArray.indexOf(id) === -1) {\n      clickPicturesArray.push(id);\n      console.log(clickPicturesArray);\n      this.addToScore();\n      this.shufflePictures();\n\n      // if player wins, then alert pops up. \n    } else if (this.state.score >= 11) {\n      alert(\"Congratulations!\");\n      this.setState({\n        score: 0,\n        clickPicturesArray: []\n      })\n\n      // if player loses, then alert pops up\n    } else {\n      alert(\"You Lost! You scored: \" + score);\n      this.setState({\n        score: 0,\n        clickPicturesArray: []\n      })\n    }\n  }\n\n  // add to player's current score\n  addToScore = () => {\n    this.setState({ score: this.state.score + 1 })\n  };\n\n  // shuffles GOT character pictures\n  shufflePictures = () => {\n    this.setState({ Picture: shuffle(Picture) });\n  }\n\n  render() {\n    return (\n      <>\n        <Header\n          score={this.state.score}\n          highscore={this.state.highscore}\n        />\n        <Wrapper>\n          {this.state.Picture.map(pictures => (\n            <Cards\n              key={pictures.id}\n              id={pictures.id}\n              name={pictures.name}\n              image={pictures.image}\n              class={\"imgClass\"}\n              clickPicture={this.clickPicture}\n              width={100}\n              heigt={100}\n            />\n          ))}\n        </Wrapper>\n      </>\n\n    )\n  }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}